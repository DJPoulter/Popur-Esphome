substitutions:
  device_name: "popur"
  device_friendly_name: "Popur"
  litterbox_id: !secret litterbox_id

esphome:
  name: $device_name
  friendly_name: $device_friendly_name

esp32:
  board: esp32dev
  framework:
    type: esp-idf

api:
  encryption:
    key: !secret home_assistant_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: $device_friendly_name
    password: !secret wifi_fallback_password

captive_portal:

globals:
  - id: popur_occupied
    type: bool
  - id: popur_running_status
    type: bool
  - id: popur_full_status
    type: bool
  - id: popur_num_times_cleaned
    type: int
  
mqtt:
  broker: !secret mqtt_broker
  port: 1883
  on_json_message:
    - topic: devsrpc/attr/${litterbox_id}
      then:
        - lambda: |-
            if (x.containsKey("method") && x["method"] == "properties_changed" && x.containsKey("params")) {
              if (x["params"][0]["pid"] == 2) {
                id(popur_occupied) = x["params"][0]["value"] == 3;
                id(popur_running_status) = x["params"][0]["value"] == 1;
              } else if (x["params"][0]["pid"] == 6) {
                id(popur_full_status) = x["params"][0]["value"] == 2;
              } else if (x["params"][0]["pid"] == 8) {
                id(popur_num_times_cleaned) = x["params"][0]["value"];
              }
            }
        - component.update: popur_num_times_cleaned_sensor
        - binary_sensor.template.publish:
            id: popur_running_sensor
            state: !lambda 'return id(popur_running_status);'
        - binary_sensor.template.publish:
            id: popur_full_sensor
            state: !lambda 'return id(popur_full_status);'

sensor:
  - platform: template
    name: Number of times cleaned
    id: popur_num_times_cleaned_sensor
    accuracy_decimals: 0
    lambda: return id(popur_num_times_cleaned);

binary_sensor:
  - platform: template
    name: Litterbox occupied
    id: popur_occupied_sensor
    device_class: occupancy
    lambda: return id(popur_occupied);

  - platform: template
    name: Current status
    id: popur_running_sensor
    device_class: running
    lambda: return id(popur_running_status);

  - platform: template
    name: Litter bin capacity
    id: popur_full_sensor
    device_class: problem
    lambda: return id(popur_full_status);

button:
  - platform: template
    name: Clean
    on_press:
      then:
        - mqtt.publish:
            topic: devcrpc/action/${litterbox_id}
            payload: '{"method":"action","params":{"did":"0","sid":2,"aid":1}}'